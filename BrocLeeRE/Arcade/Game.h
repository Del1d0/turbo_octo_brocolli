#pragma once
#include "Player.h"
#include "Renderer.h"
#include <vector>

class Game //(содержит игрока, и вектор сущностей)
{
public:
	void initGame(); // расставляем игрока, начальные облака и прочее
	void update(); // тут обновляем положения объектов, все стреляют, если время подошло
	
		// обновить координаты игрока на основании ввода (или выстрелить)

		// обновить координаты врагов на основании их контроллеров
			// можно параметризовать кривую, по которой они двигаются, чтобы они шли друг за другом паравозиком по зигзагу
			// шахматный порядок или еще что, в зависимости от типа врага

		// обновить положения снарядов, ракет и прочего

		// передвинуть облака и прочие фоновые объекты вниз
			// столкновения с ними ничего не делают
			// вообще проверяется столкновение только игрока со снарядами, либо снарадов с врагами (враги не наносят урона своим)

		// передвинуть бонусы

		// прострелять всем кому можно (вообще у каждого типа врага разное оружие и скорострельность, соответсвенно,
		// нужно как-то отслеживать, что у врага идет КД (перезарядка) (заводить отдельный таймер для каждого типа оружия?)
	
	void checkCollisions(); // проверяем столкновения, отнимаем ХП, подбираем бонусы
							// тут же проверку на выход за границу
	
		// игрок вышел за гарницы поля? -> вернуть его назад на самую границу иначе ничего не делаем

		// враги вышли за границы поля + длина врага? -> удалить его (вызвать деструктор? или просто удалить из массива?)

		// проверяем попадание снаряда и пр. в область хитбокса игрока
			// если щит присутствует, то дамажим его, иначе дамажим игрока

		// проверяем бонусы, начисляем очки\хп\щиты\бусты\оружие (завести enum с бонусами)
	
	bool checkGameOver(); // помер ли игрок
	
		// if(p1.getHp() <= 0)
			//умираем

		// пока умираем только так, в приницпе, можно добавить режим, где мы защищаем союзника от волн, тогда добавится условие
		// на хп для союзника
	
	void Render(); // какая-то отрисовка
	
		// отрисовка фона
		// отрисовка игрока
		// отрисовка врагов
		// отрисовка снарядов
	

private:
	Player mP1;

	std::vector<Entity*> mBackgroundObjects; // всякие объекты на карте, которые пролетают фоном (зациклить их просто при вылете за карту
											 // менять положение на рандомное по х, чтобы появлялись с разных сторон
											 // можно менять скорость на разную, чтобы возникал эффект параллакса (разная высота облаков)
	std::vector<Entity*> mProjectiles; // это снаряды, которые летают туда сюда и помирают при вылете за карту / попадании в игрока

	//будем подавать врагов волнами, и не будем делать новую волну, пока старая не погибнет
	std::vector<EnemyEntity*> mEnemies; // враги, добавляем \ убираем, когда нужно
	std::vector<BonusEntity*> mBonuses; // какие-нибудь бонусы, которые медленно плывут и их можно поднять (быстрая стрельба, лазер какой-нибудь)


	int xWindow;
	int yWindow; // размеры игрового поля (поле отрисовки), за которое нельзя вылетать (упираемся в невидимые стены)
				 // враги умирают при вылете за yWindow + длина хитбокса (чтобы не было видно, как они удаляются)
};